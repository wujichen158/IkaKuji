plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id("com.github.johnrengelman.shadow") version "8.1.1"
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(11)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: mapping_channel, version: mapping_version

    copyIdeResources = true
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    maven { url = "https://jitpack.io" }
    maven { url = "https://repo.aikar.co/content/groups/aikar/" }
    maven { url = "https://repo.spongepowered.org/maven" }
    maven { url = "https://maven.envyware.co.uk/releases" }
    maven {
        url 'https://www.cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    shadow group: 'org.spongepowered', name: 'configurate-yaml', version: '4.0.0'
    shadow(group: 'com.envyful.api', name: 'commons', version: envy_api_version)
    shadow(group: 'com.envyful.api', name: 'forge16', version: envy_api_version) {
        transitive = false
    }
}

shadowJar {
    configurations = [project.configurations.shadow]
    setArchiveClassifier('')
    setArchiveBaseName("${mod_name}-Forge")

    relocate('org.spongepowered.configurate', "${mod_group_id}.shade.configurate")
    relocate('org.yaml.snakeyaml', "${mod_group_id}.shade.snakeyaml")
    relocate('io.leangen.geantyref', "${mod_group_id}.shade.geantyref")
    relocate('com.zaxxer', "${mod_group_id}.shade.hikari")
    relocate('org.slf4j', "${mod_group_id}.shade.slf4j")
//    relocate('org.apache', "${mod_group_id}.shade.apache")
    relocate('com.envyful.api', "${mod_group_id}.shade.envy.api")
    relocate('org.bstats', "${mod_group_id}.shade.bstats")
    relocate('io.netty', "${mod_group_id}.shade.netty")
    relocate('io.lettuce', "${mod_group_id}.shade.lettuce")
    relocate('com.sun.el', "${mod_group_id}.shade.sun.el")
    relocate('org.reactivestreams', "${mod_group_id}.shade.reactivestreams")
    relocate('reactor', "${mod_group_id}.shade.reactor")

    exclude "com/google/**"
    exclude "javax/**"
    exclude "**/module-info.class"
    exclude "**/*.properties"
    exclude "**/*.xml"
    exclude "META-INF/versions/9/**"
    exclude "META-INF/native-image/**"
    exclude "META-INF/services/**"
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version       : forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

jar {
    setArchiveBaseName("${mod_name}-Forge")
}

tasks.register('versionedRelease', Copy) {
    dependsOn('shadowJar')
    delete fileTree('release/') {
        include '**/*.jar'
    }
    group "build"
    from("./build/libs/${mod_name}-Forge-${mod_version}.jar")
    into('release/')
    include '*.jar'
}

jar.finalizedBy('shadowJar')
shadowJar.finalizedBy('reobfJar')
tasks.named('build') {
    finalizedBy('versionedRelease')
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
