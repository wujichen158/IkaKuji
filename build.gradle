plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id("com.github.johnrengelman.shadow") version "8.1.1"
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(11)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: mapping_channel, version: mapping_version
    
    copyIdeResources = true
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    maven { url = "https://jitpack.io" }
    maven { url = "https://repo.aikar.co/content/groups/aikar/" }
    maven { url = "https://repo.spongepowered.org/maven" }
    maven { url = "https://maven.envyware.co.uk/releases" }
    maven {
        url 'https://www.cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    shadow group: 'org.spongepowered', name: 'configurate-yaml', version: '4.0.0'
    shadow (group: 'com.envyful.api', name: 'commons', version: envy_api_version)
    shadow (group: 'com.envyful.api', name: 'forge16', version: envy_api_version){
        transitive = false
    }
}

shadowJar {
    configurations = [project.configurations.shadow]
    setArchiveClassifier('')
    setArchiveBaseName("${mod_name}-Forge")

    relocate('org.spongepowered.configurate', "${mod_group_id}.shade.configurate")
    relocate('org.yaml.snakeyaml', "${mod_group_id}.shade.snakeyaml")
    relocate('io.leangen.geantyref', "${mod_group_id}.shade.geantyref")
    relocate('com.google.gson', "${mod_group_id}.shade.gson")
    relocate('com.zaxxer', "${mod_group_id}.shade.hikari")
    relocate('org.slf4j', "${mod_group_id}.shade.slf4j")
    relocate('com.envyful.api', "${mod_group_id}.shade.envy.api")
    relocate('org.bstats', "${mod_group_id}.shade.bstats")

    exclude "com/google/**"
    exclude "javax/**"
    exclude "**/module-info.class"
    exclude "META-INF/versions/9/**"
    exclude "META-INF/native-image/**"
    exclude "META-INF/services/**"
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
}

    finalizedBy 'reobfJar'
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
